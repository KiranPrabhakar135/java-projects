import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class StackUsingQueues {

	public Queue<Integer> queue = new LinkedList<Integer>();
	public Queue<Integer> tempQueue = new LinkedList<Integer>();
	int top = 0;
	public void push(int x) {
		queue.add(x);
		top = x;
	}
	
	public int pop() {
		while (!this.queue.isEmpty()) {
			int dequedElement = this.queue.remove();
			if(dequedElement == top){
				while(!tempQueue.isEmpty()){
					int removedEle = tempQueue.remove();
					queue.add(removedEle);
					top = removedEle;
				}				
				return dequedElement;
			}
			else {
				tempQueue.add(dequedElement);
			}
		}
		return 0;
	}
	
	public int top() {
		while (!this.queue.isEmpty()) {
			int dequedElement = this.queue.peek();
			if(dequedElement == top){
				
				return dequedElement;
			}
			else {
				continue;
			}
		}
		return 0;
	}
	
	public static void main(String[] args) {
		

	}

}
